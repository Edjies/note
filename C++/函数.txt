1. 函数定义

2. 函数参数

3. 函数返回值

4. 函数重载


5. Function Matching

6. 指针和函数



区别两个概念， 名称(name) 的作用域(scope) 和 生存周期(lifetime)
	1). 作用域   指的是一个名称在程序文本中的可见性。
	2). 生存周期 指的是一个对象在程序运行期间的存在性。
	3). 全局变量(作用域) 的生存周期是整个程序的运行期间。
	4). 局部变量(如函数内) 则依赖于它是怎样定义的。
	
	自动变量：
		一个局部变量 在函数执行其定义语句的时候创建， 并在其 所在块 结束时销毁。 如函数的参数列表就是一种自动变量。(就算是指针， 那也是， 自动变量的指针只销毁其值，而不会销毁其所指向的对象)， 引用参数应该不属于自动变量。
	
	局部静态变量(定义在函数内部的静态变量)：
		在第一次执行定义语句时创建(并且只会被定义一次)， 持续到整个程序的结束。 


		
函数声明
	和全局变量类似， 其一般做法是 在头文件中声明， 在源文件中定义。
	

2. 参数传递
	
	2.1. 值传递
		复制实际参数的值 传递给 形参。 普通的变量传递 和 指针传递 都是值传递。 
	
	2.2. 引用传递
		传递一个变量的引用。 
		优点是 可以避免值的复制引起的额外开销， 二是一些对象不允许进行复制。
		
	2.3 const 参数
		@see extra const
	
	2.4 数组参数
		当使用数组作为形参的时候， 实参实际上传的是数组第一个元素的地址。

extra const
		指针 和 const
			常量指针(top-level const作用于自身) 和 指向常量的指针(low-level, const作用于其指向的对象)
			int i = 1;
			int* const cpi = &i; // 常量指针， 指针的值不可改变   
			const double pi = 3.14;
			const double *ppi = &pi;  // 指向常量的指针， 指针指向的对象的值不可改变
		
		const 用于修饰某一个变量的值不可改变。
		
		int i = 42; // ok
		const int *cp = &i; // ok, 但是 cp 不能修改 i
		const int &ri = i;  // ok, 但是 ri 不能修改 i
		const int &ri2 = 42; // ok
		
		int *cp2 = cp; // error, cp2 和 cp 不匹配
		int &ri3 = ri; // error, ri2 和 ri 不匹配
		int &ri4 = 42; // error, 不能直接用一个字面量初始化一个非常量引用
		
extra using
	另一种给类型起别名的方式： using <name> = <type>
	typedef int arrT1[10];
	using arrT2 = int[10];
	arrT* func(int i);
		
3. 返回值
	3.1. 不要返回一个局部变量的引用或者指针。(对象在函数结束时会被销毁)， 即当一个函数的返回值是一个引用或者指针的时候，永远要考虑其指向的对象是否存在。
	3.2. 返回机制可以参考参数传递。当返回类型为 普通对象 或 指针时， 返回的是该对象的复制； 当返回类型是引用时， 返回的是该对象的引用。
	3.3. 返回有风险，用时需谨慎。
	3.4. 当函数返回一个引用时，该函数可以作为一个lvalue. 否则，该函数是一个rvalue;
			
			int &getNext(int &num);
			int i = 4;
			getNext(i) = 5;
			
	3.5. (新标准)  return {"aaa", "bbbb"};  // vector<string>  getMessages();
	
	3.6. 返回数组的指针		
		标准定义eg：
			int (*getArr())[10];
		别名：
			typedef int arrT[10];
			arrT* getArr();
		decltype:
			int odd[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
			decltype(odd) *getArr();

		将数组定义看成是变量定义， 返回值类型为变量类型， 函数名+参数 为 变量名。

extra 数组 和 指针
	int arr[10]; // 定义一个数组
	int *p1[10]; // 定义一个保存10个指针的数组
	int (*p2)[10]; // 定义一个指向数组(size == 10)的指针。
	// 引用类似

4. 函数重载
	类似于java的函数重载规则
	
5. 函数指针
	 int func(int i);
	// 声明一个未初始化的函数指针
	int (*pf)(int i);   // int *pf(int i); 表示一个返回值为 int* 的函数
	
	// 函数指针初始化
	pf = func;
	pf = &func; // 两种方式都一样的
	
	// 函数指针调用
	int j = pf(1);
	int z = (*pf)(1); // 两种方式都一样
	
	5.2. 函数指针可以作为函数参数(俗称回调)
		void func2(int i, int (*pf)(int j));
	
	5.3 函数指针可以作为函数的返回值
		using F = int(int *, int); // F是一个函数类型
		using PF = int(*)(int *, int); // F是一个函数指针类型
		PF f1(int); // ok, f1 返回一个函数指针
		F f1(int); // error, 函数不能返回一个函数类型
		F *f1(int); // ok, 返回一个指向函数的指针
		
		// 或者
		int (*f1(int))(int *, int); // 呵呵
	